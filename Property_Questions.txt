MVP Questions
In our Property Tracker application:

Q1. Where are we instantiating instances of the Property class?
We are creating the Property class in Ruby to be update. The Data is created in the console and fed via the model into the database.

Q2. Where are we defining the SQL that enables us to save the ruby Property object into the database?
SQL is defined by using "sql = then putting in the required sql code"
eg sql = "INSERT INTO (This will insert code into the database)

Q3. In console.rb, which lines modify the database?
To update from console a two line code is required
property_2.value = 120000 (This is the line to be updated)
property_2.update()       (This is the line that runs that runs the code in ruby)

Q4. Why do we not define the id of a Property object at the point we instantiate it (‘new it up’)?
Because we don't want the id to be set by the ruby side of the program only picked up when it returned from the database.

Q5. Where and how do we assign the property id (that is generated by the database) to the ruby object?
The is added to the object as an array @id = db.exec_prepared("save", values)[0]['id'].to_i
This is done once the item has been pushed to the database.

Q6. Why do we put a guard (an ‘if’ clause) on the @id attribute in the constructor?
This allows the function to bail out should the id already be in place rather than stopping the program from running.

Q7. Why are some of the CRUD actions represented by instance methods, and others, class methods?
CRUD methods that are run as classes can make large scale changes such as list all or find all. Other methods such as delete or update want to be run on much smaller samplers to be return more manageable results or impacts.

Q8. What type of data structure is returned by db.exec() and db.exec_prepared(), and how do we index into it to pull out a desired attribute?
PG object, we use map to turn it into an array.

Q9. Why do we use prepared statements when performing database operations?
Prepared statements are used increase security by not allowing inject attacks such replacing @first_name with the value $1

Extension Questions
Look at the find_by_id and find_by_address methods in the Property class.

Q10. What do they take in as their arguments?

Q11. What are their return values?
